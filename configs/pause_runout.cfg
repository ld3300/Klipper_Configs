######################################################################
#
# Filament runout sensor handling macros. 
#
######################################################################

[gcode_macro RUNOUT_EXTR0]   # EXT0 detected runout
gcode:
    SAVE_GCODE_STATE NAME=RUNOUT_E0
    M117 Ext0 Runout detected
    RESPOND TYPE=command MSG="Extruder 0 Filament Runout"
    SET_FILAMENT_SENSOR SENSOR=fsensor0 ENABLE=0    # disable filament sensor
    # If we have more than one extruder and we are set to use a filament backup
    {% if (printer["gcode_macro EXTRUDER_VARS"].num_extruders > 1) and (printer["gcode_macro EXTRUDER_VARS"].ext1_bkup == 1) %}
        M117 Swapping to backup
        SWAP_EXTRUDER EXTR=extruder1                        # unload active and load this extruder
        SET_FILAMENT_SENSOR SENSOR=fsensor1 ENABLE=1        # disable filament sensor
        RESUME_TEMP
        RESTORE_GCODE_STATE NAME=RUNOUT_E0 MOVE=1 MOVE_SPEED=1500
        RESUME
        CLEAR_PAUSE
    {% else %}
        M600                # Unload and wait
        SET_GCODE_VARIABLE MACRO=RESUME_MACRO VARIABLE=extr VALUE=0
    {% endif %}

[gcode_macro RUNOUT_EXTR1]
gcode:
    M117 Ext1 Runout detected
    RESPOND TYPE=command MSG="Extruder 1 Filament Runout"
    SET_FILAMENT_SENSOR SENSOR=fsensor1 ENABLE=0      # disable filament sensor
    M600
    SET_GCODE_VARIABLE MACRO=RESUME_MACRO VARIABLE=extr VALUE=1

##################### Functions #############################


[gcode_macro M600]                    # on M600 run Pause and Unload
gcode:
    SAVE_GCODE_STATE NAME=M600_State
    SET_FILAMENT_SENSOR SENSOR=fsensor0 ENABLE=0        # disable filament sensor
    SET_FILAMENT_SENSOR SENSOR=fsensor1 ENABLE=0        # disable filament sensor
    MARIO_DEATH
    PAUSE_MACRO
    UPDATE_DELAYED_GCODE ID=LONG_PAUSE DURATION=450

[gcode_macro PAUSE_MACRO]           # run Macro to unload head and pause gcode
gcode:
    SET_GCODE_VARIABLE MACRO=RESUME_MACRO VARIABLE=restore_state VALUE=1      # restore when resume
    PAUSE                           # generic tell print to pause
    SOUND_ALERT                     # Ring buzzer
    STORE_TEMP                      # Store Current temperatures in case nozzle timeout
    PARK_MACRO                      # Move Nozzle to safe location away from print (prevent heat divit)

[gcode_macro PARK_MACRO]            # set Park positions and move
default_parameter_X: 235
default_parameter_Y: -4
default_parameter_Z: 20
gcode:
    M117 PARKING..
    G92 E0
    G91
    M83
    G1 E-3.14 F1500
    G1 Z{Z}
    G90
    M82
    G1 X{X} Y{Y} F3000
    M117 Nozzle Parked

# Maybe switch these variables to parameters?
[gcode_macro RESUME_MACRO]            #M117 Now at { params.VALUE|float * 100 }%
variable_restore_state: 0
gcode:
    BOINCPAUSE              # Make sure BOINC isn't running
    {% if printer["gcode_macro RESUME_MACRO"].restore_state == 1 or 'RESTORE' in params %}       # do following only if filament reload
        RESUME_TEMP
        {% if 'EXTRUDER' in params %}
            SET_FILAMENT_SENSOR SENSOR=fsensor0 ENABLE=1      # reenable filament sensor
        {% elif 'EXTRUDER1' in params %}
            SET_FILAMENT_SENSOR SENSOR=fsensor1 ENABLE=1      # reenable filament sensor
        {% endif %}
        M117  RESUMING...
        RESTORE_GCODE_STATE NAME=M600_State MOVE=1 MOVE_SPEED=1500
        SET_GCODE_VARIABLE MACRO=RESUME_MACRO VARIABLE=restore_state VALUE=0      # restore when resume
        RESUME
    {% endif %}
    M117 Resuming print
    UPDATE_DELAYED_GCODE ID=CLEAR_MSG DURATION=15
    CLEAR_PAUSE
    {% if printer["gcode_macro M876"].response <= 99 %}
        RESPOND TYPE=command MSG="action:prompt_end"
    {% endif %}
